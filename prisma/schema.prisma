// This is your Prisma schema file
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  twoFactorEnabled      Boolean   @default(false)
  twoFactorSecret       String?
  twoFactorBackupCodes  String?
  passwordResetToken    String?   @unique
  passwordResetExpires  DateTime?
  verificationToken     String?   @unique
  verificationExpires   DateTime?
  failedLoginAttempts   Int       @default(0)
  lockedUntil           DateTime?
  lastLogin             DateTime?
  
  // Appearance settings
  theme                 String?   @default("light") // light or dark
  font                  String?   @default("inter") // inter, manrope, or system
  
  // Notification settings
  notificationType      String?   @default("all") // all, mentions, or none
  mobilePushEnabled     Boolean?  @default(false)
  communicationEmails   Boolean?  @default(false)
  marketingEmails       Boolean?  @default(false)
  socialEmails          Boolean?  @default(true)
  securityEmails        Boolean?  @default(true)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  authLogs              AuthLog[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AuthLog {
  id        String   @id @default(cuid())
  eventType String
  userId    String?
  email     String?
  ip        String?
  userAgent String?
  metadata  String?  // JSON stringified
  timestamp DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([eventType])
  @@index([userId])
  @@index([timestamp])
}
